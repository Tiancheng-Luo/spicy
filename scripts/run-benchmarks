#! /usr/bin/env bash
#
# Usage:
#
#   1. Build binaries:
#
#        ./run-benchmark build
#
#   2. Run benchmarks:
#
#        ./run-benchmark -t <dir-with-trace> run
#
#   <dir-with-trace> must contain:
#
#        spicy-<protocol>.pcap
#        spicy-<protocol>.dat
#
#   Protocols are curently "http" and "dns".
#
#
# To create the *.dat files:
#
#   zeek -r trace.pcap zeek/scripts/record-spicy-batch.zeek
#

build="<no build directory>"
work=./benchmark
traces=~/data/traces

protocols="http dns"

if [ -x ./bin/spicy-config ]; then
    build=$(pwd)
elif [ -d $(dirname $0)/../../build ]; then
    build="$(cd $(dirname $0)/../../build && pwd)"
fi

fatal_error() {
    echo "error: $@"
    exit 1
}

check_zeek() {
    ${zeek} -v | grep -q debug && echo "Warning: Using debug version of Zeek"
}

check_binaries() {
    for p in ${protocols}; do
        for x in ${p}-opt ${p}-opt.hlto ${p}-zeek-opt.hlto; do
            test -x ${x} || echo "Warning: ${x} does not exist (did you build the benchmarks?)"
        done
    done
    return 0
}

check_traces() {
    for p in ${protocols}; do
        for t in dat pcap; do
            file=${traces}/spicy-${p}.${t}
            test -f ${traces}/spicy-${p}.${t} || echo "Warning: ${file} does not exist"
        done
    done
}

do_build() {
    check_zeek

    for p in ${protocols}; do
        echo Building ${p} binaries ...

        # Standalone binary
        spicy-build -o ${p}-opt ${dist}/spicy/lib/protocols/http.spicy &
        spicy-build -o ${p}-dbg -d ${dist}/spicy/lib/protocols/http.spicy &

        # Standalone HLTO
        spicyc -j -o ${p}-opt.hlto -O ${dist}/spicy/lib/protocols/http.spicy &
        spicyc -j -o ${p}-dbg.hlto -d ${dist}/spicy/lib/protocols/http.spicy &

        # Zeek HLTO
        spicyz -o ${p}-zeek-opt.hlto -O ${dist}/spicy/lib/protocols/${p}.spicy ${dist}/zeek/plugin/lib/protocols/${p}.evt ${dist}/zeek/plugin/lib/protocols/zeek_${p}.spicy &
        spicyz -o ${p}-zeek-dbg.hlto -d ${dist}/spicy/lib/protocols/${p}.spicy ${dist}/zeek/plugin/lib/protocols/${p}.evt ${dist}/zeek/plugin/lib/protocols/zeek_${p}.spicy &

        wait
    done
}

log() {
    msg=$@
    echo "# ${msg}" >&2
}

exec_cmd() {
    cmd=$@
    log "${cmd}"
    $@
}

os_time() {
    if [ "$(uname -s)" = "Linux" ]; then
        /usr/bin/env time -f "# user_time=%U system_time=%S" $@
    else
        fatal_error "unsupported OS in os_time"
    fi
}

time_3x() {
    tag=$1
    cmd=$2
    logs=$3

    printf "%15s  " "${tag}"

    mkdir -p output
    echo "${cmd}" >output/${tag}.cmd

    for i in 1 2 3; do
        status=""
        ${cmd} >output/${tag}.stdout 2>output/${tag}.stderr || status="<fail>"
        if [ -z "${status}" ]; then
            status="ok"
            time=$(grep "# .*user_time" output/${tag}.stderr |sed 's/.*user_time=\([0-9.]*\).*/\1/g')
            test -z "${time}" && status="<no time>"
        fi
        if [ "${status}" = "ok" ]; then
            printf "%-10.2f  " "${time}"
        else
            printf "%-10s  " "${status}"
        fi
    done
    count ${logs}
    echo
}

count() {
    for file in $@; do
        cnt="<n/a>"
        test -e "${file}" && cnt=$(wc -l ${file} | awk '{print $1}')
        printf "%10s=%s" "${file}" "${cnt}"
    done
}

do_run() {
    check_binaries
    check_zeek
    check_traces

    unset BROPATH
    unset ZEEKPATH
    unset ZEEK_LD_PRELOAD
    export ZEEK_PLUGIN_PATH=${build}/zeek
    unset BRO_PLUGIN_PATH

    for p in ${protocols}; do
        input_dat=${traces}/spicy-${p}.dat
        input_pcap=${traces}/spicy-${p}.pcap

        if [ -e ${input_dat} ]; then
            test -x ./${p}-opt      && time_3x "${p}-static"      "./${p}-opt -U -F ${input_dat}"
            test -f ./${p}-opt.hlto && time_3x "${p}-hlto"        "spicy-driver -U -F ${input_dat} ${p}-opt.hlto"
        fi

        if [ -e ${input_dat} ]; then
             test -f ./${p}-zeek-opt.hlto && time_3x "${p}-zeek-spicy"  "os_time ${zeek} -r ${input_pcap} ${p}-zeek-opt.hlto"   "conn.log ${p}.log"
             time_3x "${p}-zeek-std"    "os_time ${zeek} -r ${input_pcap}"                      "conn.log ${p}.log"
        fi
        echo
    done
}

usage() {
    cat <<EOF
Usage: $(basename $0) <options> <build|run>

        -b <Spicy build directory>  [default: ${build}]
        -d <Work directory>         [default: ${work}]
        -t <Trace directory>        [default: ${traces}]

EOF
}

while getopts "b:ht:" opt; do
    case "$opt" in
        b) build=$OPTARG;;
        d) work=$OPTARG;;
        t) traces=$OPTARG;;
        *) usage;;
    esac
done

shift $((OPTIND-1))

if [ $# != 1 ]; then
    usage
    exit 1
fi

cmd=$1

if [ ! -x ${build}/bin/spicy-config ]; then
    echo ${build} is not a Spicy build direcgtory
    exit 1
fi

export PATH=${build}/bin:${PATH}
dist=$(spicy-config --distbase)
zeek=$(spicy-config --zeek)

mkdir -p ${work}
cd ${work}

case "${cmd}" in
    build) do_build;;
    run) do_run;;
    *) usage; exit 1;;
esac
